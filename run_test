#!/bin/bash
log() {
  echo $(date +"%F %T") "$*"
}

read_tag() {
  modpoll/win32/modpoll.exe -1 -0 -r 10 -c 2 10.0.25.77 1>out 2>err 
  local err_data=$(cat err)
  if ! test -z ${err_data// }; then
    log "General error: $err_data"
    return
  fi
  out=$(cat out)

  res_w1=$(log "$out" | sed -r -n '/\[10\]/s|.*: ||p')
  res_w2=$(log "$out" | sed -r -n '/\[11\]/s|.*: ||p')

  val_in_w1=$(( $res_w1 << 16 ))
  val_in_w2=$res_w2

  val_in="$(( $val_in_w1 | $val_in_w2 ))"

  log "Received: [$res_w1:$res_w2], value:$val_in"
}

write_tag() {
  local delay=0
  while true; do
    modpoll/win32/modpoll.exe -1 -0 -r 10 -c 2 10.0.25.77 $1 $2 1>out_wr 2>err_wr
    local err_data=$(cat err)
    if ! test -z ${err_data// }; then
      log "General write error: $err_data delay: $delay"
      let delay+=1
      sleep 1
    else
      if test $delay -gt 0; then
        log "delay was $delay"
      fi
      log "value $(( $1 * 65535 + $2 )) has been written"
      break;
    fi
  done
}


counter=$(read_tag | sed -n -r "s|.*value:||p") 
log "Counter initialized to \"$counter\""
let counter+=1
delay=0
while true; do
  # writing new value
  # let counter+=1
  lw=$(( $counter % 65535 ))
  hw=$(( $counter / 65535 ))

  write_tag $hw $lw

  read_value="0"
  while true; do
    read_result=$(read_tag)
    if [[ $read_result == *"General error"* ]]; then
      log "Read error: $read_result, delay: $delay"
      let delay+=1
    else
      read_value=$(log $read_result | sed -n -r 's|.*value:||p')
      delay=0
      break
    fi
    sleep 1
  done
  log "Got a value from device: $read_value counter: $counter"

  found="no"
  for i in `seq 0 10`;
  do
    val=$(( $read_value + $i ))
    if test $counter -eq $val; then
      # log "read value: $read_value - $i == $counter"
      counter=$(( $read_value + 1 ))
      found="yes"
      break
    else
      log "val: $val is not equal to $counter"
    fi
  done 
  if test $found == "no"; then
    log "could not find appropriate value on device counter=$counter read_value=$read_value"
    exit 1
  fi
  sleep 1
done

